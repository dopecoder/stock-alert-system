// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package trigger_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TriggerServiceClient is the client API for TriggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerServiceClient interface {
	CreateTrigger(ctx context.Context, in *CreateTriggerReq, opts ...grpc.CallOption) (*CreateTriggerRes, error)
	GetTrigger(ctx context.Context, in *GetTriggerReq, opts ...grpc.CallOption) (*GetTriggerRes, error)
	GetTriggerStatus(ctx context.Context, in *TriggerStatusReq, opts ...grpc.CallOption) (*TriggerStatusRes, error)
	StartService(ctx context.Context, in *StartServiceReq, opts ...grpc.CallOption) (*StartServiceRes, error)
	StopService(ctx context.Context, in *StopServiceReq, opts ...grpc.CallOption) (*StopServiceRes, error)
	DeteTrigger(ctx context.Context, in *DeleteTriggerReq, opts ...grpc.CallOption) (*DeleteTriggerRes, error)
	CheckServiceHealth(ctx context.Context, in *CheckServiceHealthReq, opts ...grpc.CallOption) (*CheckServiceHealthRes, error)
}

type triggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerServiceClient(cc grpc.ClientConnInterface) TriggerServiceClient {
	return &triggerServiceClient{cc}
}

func (c *triggerServiceClient) CreateTrigger(ctx context.Context, in *CreateTriggerReq, opts ...grpc.CallOption) (*CreateTriggerRes, error) {
	out := new(CreateTriggerRes)
	err := c.cc.Invoke(ctx, "/trigger_service.TriggerService/createTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) GetTrigger(ctx context.Context, in *GetTriggerReq, opts ...grpc.CallOption) (*GetTriggerRes, error) {
	out := new(GetTriggerRes)
	err := c.cc.Invoke(ctx, "/trigger_service.TriggerService/getTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) GetTriggerStatus(ctx context.Context, in *TriggerStatusReq, opts ...grpc.CallOption) (*TriggerStatusRes, error) {
	out := new(TriggerStatusRes)
	err := c.cc.Invoke(ctx, "/trigger_service.TriggerService/getTriggerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) StartService(ctx context.Context, in *StartServiceReq, opts ...grpc.CallOption) (*StartServiceRes, error) {
	out := new(StartServiceRes)
	err := c.cc.Invoke(ctx, "/trigger_service.TriggerService/startService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) StopService(ctx context.Context, in *StopServiceReq, opts ...grpc.CallOption) (*StopServiceRes, error) {
	out := new(StopServiceRes)
	err := c.cc.Invoke(ctx, "/trigger_service.TriggerService/stopService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) DeteTrigger(ctx context.Context, in *DeleteTriggerReq, opts ...grpc.CallOption) (*DeleteTriggerRes, error) {
	out := new(DeleteTriggerRes)
	err := c.cc.Invoke(ctx, "/trigger_service.TriggerService/deteTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) CheckServiceHealth(ctx context.Context, in *CheckServiceHealthReq, opts ...grpc.CallOption) (*CheckServiceHealthRes, error) {
	out := new(CheckServiceHealthRes)
	err := c.cc.Invoke(ctx, "/trigger_service.TriggerService/checkServiceHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerServiceServer is the server API for TriggerService service.
// All implementations must embed UnimplementedTriggerServiceServer
// for forward compatibility
type TriggerServiceServer interface {
	CreateTrigger(context.Context, *CreateTriggerReq) (*CreateTriggerRes, error)
	GetTrigger(context.Context, *GetTriggerReq) (*GetTriggerRes, error)
	GetTriggerStatus(context.Context, *TriggerStatusReq) (*TriggerStatusRes, error)
	StartService(context.Context, *StartServiceReq) (*StartServiceRes, error)
	StopService(context.Context, *StopServiceReq) (*StopServiceRes, error)
	DeteTrigger(context.Context, *DeleteTriggerReq) (*DeleteTriggerRes, error)
	CheckServiceHealth(context.Context, *CheckServiceHealthReq) (*CheckServiceHealthRes, error)
	mustEmbedUnimplementedTriggerServiceServer()
}

// UnimplementedTriggerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerServiceServer struct {
}

func (UnimplementedTriggerServiceServer) CreateTrigger(context.Context, *CreateTriggerReq) (*CreateTriggerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) GetTrigger(context.Context, *GetTriggerReq) (*GetTriggerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) GetTriggerStatus(context.Context, *TriggerStatusReq) (*TriggerStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTriggerStatus not implemented")
}
func (UnimplementedTriggerServiceServer) StartService(context.Context, *StartServiceReq) (*StartServiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartService not implemented")
}
func (UnimplementedTriggerServiceServer) StopService(context.Context, *StopServiceReq) (*StopServiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopService not implemented")
}
func (UnimplementedTriggerServiceServer) DeteTrigger(context.Context, *DeleteTriggerReq) (*DeleteTriggerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeteTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) CheckServiceHealth(context.Context, *CheckServiceHealthReq) (*CheckServiceHealthRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckServiceHealth not implemented")
}
func (UnimplementedTriggerServiceServer) mustEmbedUnimplementedTriggerServiceServer() {}

// UnsafeTriggerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerServiceServer will
// result in compilation errors.
type UnsafeTriggerServiceServer interface {
	mustEmbedUnimplementedTriggerServiceServer()
}

func RegisterTriggerServiceServer(s grpc.ServiceRegistrar, srv TriggerServiceServer) {
	s.RegisterService(&TriggerService_ServiceDesc, srv)
}

func _TriggerService_CreateTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTriggerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).CreateTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trigger_service.TriggerService/createTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).CreateTrigger(ctx, req.(*CreateTriggerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_GetTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTriggerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).GetTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trigger_service.TriggerService/getTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).GetTrigger(ctx, req.(*GetTriggerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_GetTriggerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).GetTriggerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trigger_service.TriggerService/getTriggerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).GetTriggerStatus(ctx, req.(*TriggerStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trigger_service.TriggerService/startService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).StartService(ctx, req.(*StartServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trigger_service.TriggerService/stopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).StopService(ctx, req.(*StopServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_DeteTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTriggerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).DeteTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trigger_service.TriggerService/deteTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).DeteTrigger(ctx, req.(*DeleteTriggerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_CheckServiceHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckServiceHealthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).CheckServiceHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trigger_service.TriggerService/checkServiceHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).CheckServiceHealth(ctx, req.(*CheckServiceHealthReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerService_ServiceDesc is the grpc.ServiceDesc for TriggerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trigger_service.TriggerService",
	HandlerType: (*TriggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createTrigger",
			Handler:    _TriggerService_CreateTrigger_Handler,
		},
		{
			MethodName: "getTrigger",
			Handler:    _TriggerService_GetTrigger_Handler,
		},
		{
			MethodName: "getTriggerStatus",
			Handler:    _TriggerService_GetTriggerStatus_Handler,
		},
		{
			MethodName: "startService",
			Handler:    _TriggerService_StartService_Handler,
		},
		{
			MethodName: "stopService",
			Handler:    _TriggerService_StopService_Handler,
		},
		{
			MethodName: "deteTrigger",
			Handler:    _TriggerService_DeteTrigger_Handler,
		},
		{
			MethodName: "checkServiceHealth",
			Handler:    _TriggerService_CheckServiceHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trigger_service.proto",
}
